name: Deploy User Service to AKS

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

env:
  ACR_NAME: teleiosdupeacr01
  ACR_URL: teleiosdupeacr01.azurecr.io
  AKS_RESOURCE_GROUP: teleios-dupe-rg
  AKS_CLUSTER_NAME: rideshare-aks-cluster
  CONTAINER_NAME: user-service
  DEPLOYMENT_NAME: user-service
  NAMESPACE: rideshare
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîë ACR Login
        run: az acr login --name $ACR_NAME

      - name: ‚ò∏Ô∏è Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: üõ†Ô∏è Build Docker Image
        run: |
          docker build -t $ACR_URL/$CONTAINER_NAME:$IMAGE_TAG .

      - name: üöÄ Push Image to ACR
        run: |
          docker push $ACR_URL/$CONTAINER_NAME:$IMAGE_TAG

      - name: üîê Create or Update Kubernetes Secret
        run: |
          kubectl create secret generic user-service-secrets \
            --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --from-literal=REDIS_URL="${{ secrets.REDIS_URL }}" \
            --from-literal=JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: üß© Apply Deployment Manifest (Ensure Deployment Exists)
        run: |
          kubectl apply -f k8s/deployment.yaml -n $NAMESPACE

      - name: üö¢ Deploy to AKS
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release')
        run: |
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$ACR_URL/$CONTAINER_NAME:$IMAGE_TAG -n $NAMESPACE
